#include"标头.h"
typedef struct TreeNode* bintree;
struct TreeNode {
	int data;// 存值
	bintree left; // 左子树
	bintree right;// 右子树 
};

bintree Insert(int x, bintree bst) {
	if (!bst)
	{
		bst = (bintree)malloc(sizeof(struct TreeNode));
		bst->data = x;
		bst->left = NULL;
		bst->right = NULL;
	}
	else
	{
		if (x < bst->data)
		{
			bst->left = Insert(x, bst->left);
		}
		else if (x > bst->data)
		{
			bst->right = Insert(x, bst->right);
		}
	}
	return bst;
}


void PreOrderTraversal(bintree bst, string& s) {
	if (bst)
	{
		PreOrderTraversal(bst->left,s);  // 进入左子树 
		s += bst->data + '0'; // 将结点值保存进字符串
		PreOrderTraversal(bst->right, s);  // 进入右子树 
	}
}

int main() {
	int n, l;
	int tmp;
	cin >> n >> l;
	while (n) {  // 当 n 不为空做循环 
		BinTree InitBST = NULL;
		string Initstr;
		// 每次新输入 n l 的初始插入序列 
		for (int i = 0; i < n; i++) {
			cin >> tmp;
			InitBST = Insert(tmp, InitBST);
		}
		// Initstr 记录初始插入序列形成的树的先序遍历结果 
		// 思考为什么不用中序记录？ 
		PreOrderTraversal(InitBST, Initstr);

		// 后 l 行 
		for (int i = 0; i < l; i++) {
			BinTree BST = NULL;
			string str;
			for (int j = 0; j < n; j++) {
				cin >> tmp;
				BST = Insert(tmp, BST);
			}
			// 每行的插入序列产生一个树，用 str 记录先序遍历结果 
			PreOrderTraversal(BST, str);

			// 再将初始序列和每次插入序列产生的值进行对比 
			if (str == Initstr)
				cout << "Yes" << endl;
			else
				cout << "No" << endl;
		}
		cin >> n >> l;
	}
	return 0;
}
